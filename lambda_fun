import json
import os
import requests

def lambda_handler(event, context):
    try:
        # GitHub API configuration
        github_token = os.environ['GITHUB_TOKEN']  # Store PAT in environment variable
        owner = 'YOUR_GITHUB_USERNAME'  # Replace with repository owner
        repo = 'YOUR_REPOSITORY_NAME'  # Replace with repository name
        workflow_id = 'my-workflow.yml'  # Replace with workflow file name
        ref = 'main'  # Branch to trigger the workflow on

        # GitHub API URL for workflow dispatch
        url = f'https://api.github.com/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches'

        # Headers for GitHub API request
        headers = {
            'Authorization': f'Bearer {github_token}',
            'Accept': 'application/vnd.github.v3+json',
            'Content-Type': 'application/json'
        }

        # Payload for the workflow dispatch
        payload = {
            'ref': ref,
            'inputs': {}  # Optional: Add inputs if your workflow accepts them
        }

        # Send POST request to GitHub API
        response = requests.post(url, json=payload, headers=headers)
        response.raise_for_status()

        print('GitHub Action triggered successfully')
        return {
            'statusCode': 200,
            'body': json.dumps({'message': 'GitHub Action triggered successfully'})
        }
    except requests.exceptions.RequestException as e:
        print(f'Error triggering GitHub Action: {str(e)}')
        return {
            'statusCode': 500,
            'body': json.dumps({'error': 'Failed to trigger GitHub Action'})
        }
    except KeyError as e:
        print(f'Environment variable missing: {str(e)}')
        return {
            'statusCode': 500,
            'body': json.dumps({'error': 'Configuration error: Missing environment variable'})
        }
